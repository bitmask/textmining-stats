import unittest

from collections import defaultdict

import os, sys
lib_path = os.path.abspath('.')
sys.path.append(lib_path)

from stats import *

testcases = [
    # test name, document, recall, precision
    ["proteins_same_bound_same_norm", "100", 1, 1],
    ["proteins_diff_bound_same_norm", "101", 0, 0],
    ["proteins_same_bound_diff_norm", "102", 0, 0],
    #["proteins_only_in_one", "103", 0, 0],
    ["proteins_diff_bound_diff_norm", "104", 0, 0],
    ["proteins_same_bound_similar_norm", "105", 1, 1],

    ["species_same_bound_same_norm", "3388767", 1, 1],
    ["species_diff_bound_same_norm", "3388768", 0, 0],
    ["species_same_bound_diff_norm", "3388769", 0, 0],
    #["species_only_in_one", "3388770", 0, 0],
    ["species_diff_bound_diff_norm", "3388771", 0, 0],
    ["species_same_bound_similar_norm", "3388772", 1, 1],

]

def test_generator(document, recall, precision, uniprot, taxtree):
    def test(self):
        files = ["data.1." + document, "data.2." + document]

        annotations = defaultdict(lambda: defaultdict(list))
        for f in files:
            annotations = parse_annotations(self.data_dir + f, annotations)
        stats = inter_annotator(annotations, uniprot, taxtree)

        self.assertEqual( stats["1"]["2"][document]["recall"], recall )
        self.assertEqual( stats["1"]["2"][document]["precision"], precision )
    return test


class TestIAA(unittest.TestCase):
    data_dir = "../../tagtog/documents_index/test_data/"

    def setUp(self):
        pass

    def tearDown(self):
        pass

    # tests are generated by test_generator and added here at runtime

    pass


if __name__ == '__main__':
    filename_uniprot = "../../../uniprot_to_payload/data_in/uniprot_viruses.xml"
    filename_taxonomy =  "../../../taxonomy/nodes.dmp"
    uniprot = parse_uniprot_single_xml(filename_uniprot)
    taxtree = parse_taxtree(filename_taxonomy)

    for t in testcases:
        testname, document, recall, precision = t
        test_name = 'test_%s' % "_".join(t[0].split(" "))
        test = test_generator(document, recall, precision, uniprot, taxtree)
        setattr(TestIAA, test_name, test) # assign the correct name to the test

    unittest.main()

suite = unittest.TestLoader().loadTestsFromTestCase(TestIAA)
unittest.TextTestRunner(verbosity=2).run(suite)

